[
    {
        "id": "coolbot-mqtt-dashboard-tab",
        "type": "tab",
        "label": "CoolBot MQTT Dashboard",
        "disabled": false,
        "info": "MQTT-based dashboard for ESP32 CoolBot system with heating diode"
    },
    {
        "id": "temp-gauge-room-mqtt",
        "type": "ui_gauge",
        "z": "coolbot-mqtt-dashboard-tab",
        "name": "Room Temperature",
        "group": "temp-group-mqtt",
        "order": 1,
        "width": 4,
        "height": 4,
        "gtype": "gage",
        "title": "Room Temperature",
        "label": "°F",
        "format": "{{value}}",
        "min": 0,
        "max": 100,
        "colors": [
            "#00b500",
            "#e6e600", 
            "#ca3838"
        ],
        "seg1": 25,
        "seg2": 40,
        "className": "",
        "x": 200,
        "y": 100,
        "wires": []
    },
    {
        "id": "temp-gauge-coil-mqtt",
        "type": "ui_gauge",
        "z": "coolbot-mqtt-dashboard-tab",
        "name": "Coil Temperature",
        "group": "temp-group-mqtt",
        "order": 2,
        "width": 4,
        "height": 4,
        "gtype": "gage",
        "title": "Coil Temperature",
        "label": "°F",
        "format": "{{value}}",
        "min": 0,
        "max": 80,
        "colors": [
            "#ca3838",
            "#e6e600",
            "#00b500"
        ],
        "seg1": 33,
        "seg2": 50,
        "className": "",
        "x": 200,
        "y": 160,
        "wires": []
    },
    {
        "id": "temp-gauge-diode",
        "type": "ui_gauge",
        "z": "coolbot-mqtt-dashboard-tab",
        "name": "Heating Diode Temp",
        "group": "temp-group-mqtt",
        "order": 3,
        "width": 4,
        "height": 4,
        "gtype": "gage",
        "title": "Heating Diode",
        "label": "°F",
        "format": "{{value}}",
        "min": 60,
        "max": 140,
        "colors": [
            "#00b500",
            "#e6e600",
            "#ca3838"
        ],
        "seg1": 90,
        "seg2": 120,
        "className": "",
        "x": 200,
        "y": 220,
        "wires": []
    },
    {
        "id": "target-temp-slider-mqtt",
        "type": "ui_slider",
        "z": "coolbot-mqtt-dashboard-tab",
        "name": "Target Temperature",
        "label": "Target Temperature",
        "tooltip": "",
        "group": "controls-group-mqtt",
        "order": 1,
        "width": 0,
        "height": 1,
        "passthru": true,
        "outs": "end",
        "topic": "target_temp",
        "topicType": "str",
        "min": 25,
        "max": 45,
        "step": 1,
        "className": "",
        "x": 200,
        "y": 300,
        "wires": [["target-temp-update-mqtt"]]
    },
    {
        "id": "target-temp-update-mqtt",
        "type": "function",
        "z": "coolbot-mqtt-dashboard-tab",
        "name": "Update Target MQTT",
        "func": "flow.set('target_temp', msg.payload);\n\n// Publish to MQTT for ESP32\nconst mqttMsg = {\n    payload: {\n        target_temp: msg.payload\n    },\n    topic: 'coolbot/settings/target_temp'\n};\n\nnode.log(`Target temperature set to ${msg.payload}°F`);\nreturn mqttMsg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 450,
        "y": 300,
        "wires": [["settings-mqtt-out"]]
    },
    {
        "id": "hysteresis-slider-mqtt",
        "type": "ui_slider",
        "z": "coolbot-mqtt-dashboard-tab",
        "name": "Hysteresis",
        "label": "Hysteresis",
        "tooltip": "Temperature range above target before cooling starts",
        "group": "controls-group-mqtt",
        "order": 2,
        "width": 0,
        "height": 1,
        "passthru": true,
        "outs": "end",
        "topic": "hysteresis",
        "topicType": "str",
        "min": 1,
        "max": 5,
        "step": 0.5,
        "className": "",
        "x": 200,
        "y": 360,
        "wires": [["hysteresis-update-mqtt"]]
    },
    {
        "id": "hysteresis-update-mqtt",
        "type": "function",
        "z": "coolbot-mqtt-dashboard-tab",
        "name": "Update Hysteresis MQTT",
        "func": "flow.set('hysteresis', msg.payload);\n\n// Publish to MQTT\nconst mqttMsg = {\n    payload: {\n        hysteresis: msg.payload\n    },\n    topic: 'coolbot/settings/hysteresis'\n};\n\nnode.log(`Hysteresis set to ${msg.payload}°F`);\nreturn mqttMsg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 470,
        "y": 360,
        "wires": [["settings-mqtt-out"]]
    },
    {
        "id": "heating-diode-intensity",
        "type": "ui_slider",
        "z": "coolbot-mqtt-dashboard-tab",
        "name": "Heating Diode Intensity",
        "label": "Heating Diode Intensity",
        "tooltip": "PWM intensity for heating diode (0-255)",
        "group": "controls-group-mqtt",
        "order": 3,
        "width": 0,
        "height": 1,
        "passthru": true,
        "outs": "end",
        "topic": "heating_intensity",
        "topicType": "str",
        "min": 0,
        "max": 255,
        "step": 5,
        "className": "",
        "x": 200,
        "y": 420,
        "wires": [["heating-intensity-update"]]
    },
    {
        "id": "heating-intensity-update",
        "type": "function",
        "z": "coolbot-mqtt-dashboard-tab",
        "name": "Update Heating Intensity",
        "func": "flow.set('heating_diode_intensity', msg.payload);\n\n// Publish heating diode control\nconst mqttMsg = {\n    payload: {\n        enabled: flow.get('heating_diode_enabled') !== false,\n        intensity: msg.payload,\n        mode: 'manual'\n    },\n    topic: 'coolbot/controls/heating_diode'\n};\n\nnode.log(`Heating diode intensity set to ${msg.payload}`);\nreturn mqttMsg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 490,
        "y": 420,
        "wires": [["heating-control-mqtt"]]
    },
    {
        "id": "settings-mqtt-out",
        "type": "mqtt out",
        "z": "coolbot-mqtt-dashboard-tab",
        "name": "Settings MQTT",
        "topic": "",
        "qos": "1",
        "retain": "true",
        "respTopic": "",
        "contentType": "",
        "userProps": "",
        "correl": "",
        "expiry": "",
        "broker": "mqtt-broker-config",
        "x": 720,
        "y": 330,
        "wires": []
    },
    {
        "id": "heating-control-mqtt",
        "type": "mqtt out",
        "z": "coolbot-mqtt-dashboard-tab",
        "name": "Heating Control MQTT",
        "topic": "",
        "qos": "1",
        "retain": "true",
        "respTopic": "",
        "contentType": "",
        "userProps": "",
        "correl": "",
        "expiry": "",
        "broker": "mqtt-broker-config",
        "x": 760,
        "y": 420,
        "wires": []
    },
    {
        "id": "status-text-mqtt",
        "type": "ui_text",
        "z": "coolbot-mqtt-dashboard-tab",
        "group": "status-group-mqtt",
        "order": 1,
        "width": 6,
        "height": 2,
        "name": "System Status",
        "label": "Status:",
        "format": "{{msg.payload}}",
        "layout": "row-spread",
        "className": "",
        "x": 200,
        "y": 500,
        "wires": []
    },
    {
        "id": "ac-status-led-mqtt",
        "type": "ui_led",
        "z": "coolbot-mqtt-dashboard-tab",
        "order": 2,
        "group": "status-group-mqtt",
        "width": 2,
        "height": 1,
        "label": "AC",
        "labelPlacement": "left",
        "labelAlignment": "left",
        "colorForValue": [
            {
                "color": "#ff0000",
                "value": "false",
                "valueType": "bool"
            },
            {
                "color": "#00ff00",
                "value": "true",
                "valueType": "bool"
            }
        ],
        "allowColorForValueInMessage": false,
        "shape": "circle",
        "showGlow": true,
        "name": "AC Status LED",
        "x": 200,
        "y": 560,
        "wires": []
    },
    {
        "id": "heating-status-led",
        "type": "ui_led",
        "z": "coolbot-mqtt-dashboard-tab",
        "order": 3,
        "group": "status-group-mqtt",
        "width": 2,
        "height": 1,
        "label": "Heating",
        "labelPlacement": "left",
        "labelAlignment": "left",
        "colorForValue": [
            {
                "color": "#888888",
                "value": "false",
                "valueType": "bool"
            },
            {
                "color": "#ff8800",
                "value": "true",
                "valueType": "bool"
            }
        ],
        "allowColorForValueInMessage": false,
        "shape": "circle",
        "showGlow": true,
        "name": "Heating Diode LED",
        "x": 200,
        "y": 620,
        "wires": []
    },
    {
        "id": "esp32-status-led",
        "type": "ui_led",
        "z": "coolbot-mqtt-dashboard-tab",
        "order": 4,
        "group": "status-group-mqtt",
        "width": 2,
        "height": 1,
        "label": "ESP32",
        "labelPlacement": "left",
        "labelAlignment": "left",
        "colorForValue": [
            {
                "color": "#ff0000",
                "value": "false",
                "valueType": "bool"
            },
            {
                "color": "#00ff00",
                "value": "true",
                "valueType": "bool"
            }
        ],
        "allowColorForValueInMessage": false,
        "shape": "circle",
        "showGlow": true,
        "name": "ESP32 Status LED",
        "x": 200,
        "y": 680,
        "wires": []
    },
    {
        "id": "wifi-strength",
        "type": "ui_gauge",
        "z": "coolbot-mqtt-dashboard-tab",
        "name": "WiFi Signal",
        "group": "esp32-group",
        "order": 1,
        "width": 4,
        "height": 3,
        "gtype": "gage",
        "title": "WiFi Signal",
        "label": "dBm",
        "format": "{{value}}",
        "min": -100,
        "max": -30,
        "colors": [
            "#ca3838",
            "#e6e600",
            "#00b500"
        ],
        "seg1": -80,
        "seg2": -60,
        "className": "",
        "x": 200,
        "y": 740,
        "wires": []
    },
    {
        "id": "esp32-uptime",
        "type": "ui_text",
        "z": "coolbot-mqtt-dashboard-tab",
        "group": "esp32-group",
        "order": 2,
        "width": 6,
        "height": 1,
        "name": "ESP32 Uptime",
        "label": "Uptime:",
        "format": "{{msg.payload}} seconds",
        "layout": "row-spread",
        "className": "",
        "x": 200,
        "y": 800,
        "wires": []
    },
    {
        "id": "emergency-stop-mqtt",
        "type": "ui_button",
        "z": "coolbot-mqtt-dashboard-tab",
        "name": "Emergency Stop",
        "group": "controls-group-mqtt",
        "order": 4,
        "width": 0,
        "height": 1,
        "passthru": false,
        "label": "EMERGENCY STOP",
        "tooltip": "Immediately turn off AC and heating diode",
        "color": "white",
        "bgcolor": "red",
        "className": "",
        "icon": "",
        "payload": "emergency_stop",
        "payloadType": "str",
        "topic": "emergency",
        "topicType": "str",
        "x": 200,
        "y": 860,
        "wires": [["emergency-handler-mqtt"]]
    },
    {
        "id": "emergency-handler-mqtt",
        "type": "function",
        "z": "coolbot-mqtt-dashboard-tab",
        "name": "Emergency Stop Handler",
        "func": "// Set emergency mode\nflow.set('ac_status', 'off');\nflow.set('system_status', 'emergency_stop');\nflow.set('emergency_mode', true);\nflow.set('heating_diode_enabled', false);\n\nnode.warn('EMERGENCY STOP ACTIVATED - MQTT');\n\n// Send AC off command\nconst acOffMsg = {\n    payload: {\n        command: 'off',\n        reason: 'emergency_stop',\n        source: 'dashboard',\n        timestamp: Date.now()\n    },\n    topic: 'coolbot/controls/ac_plug'\n};\n\n// Send heating diode off command  \nconst heatingOffMsg = {\n    payload: {\n        enabled: false,\n        intensity: 0,\n        mode: 'off'\n    },\n    topic: 'coolbot/controls/heating_diode'\n};\n\nreturn [acOffMsg, heatingOffMsg];",
        "outputs": 2,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 470,
        "y": 860,
        "wires": [["emergency-ac-mqtt"], ["emergency-heating-mqtt"]]
    },
    {
        "id": "emergency-ac-mqtt",
        "type": "mqtt out",
        "z": "coolbot-mqtt-dashboard-tab",
        "name": "Emergency AC Off",
        "topic": "",
        "qos": "1",
        "retain": "false",
        "respTopic": "",
        "contentType": "",
        "userProps": "",
        "correl": "",
        "expiry": "",
        "broker": "mqtt-broker-config",
        "x": 730,
        "y": 840,
        "wires": []
    },
    {
        "id": "emergency-heating-mqtt",
        "type": "mqtt out",
        "z": "coolbot-mqtt-dashboard-tab",
        "name": "Emergency Heating Off",
        "topic": "",
        "qos": "1",
        "retain": "false",
        "respTopic": "",
        "contentType": "",
        "userProps": "",
        "correl": "",
        "expiry": "",
        "broker": "mqtt-broker-config",
        "x": 750,
        "y": 880,
        "wires": []
    },
    {
        "id": "reset-system-mqtt",
        "type": "ui_button",
        "z": "coolbot-mqtt-dashboard-tab",
        "name": "Reset System",
        "group": "controls-group-mqtt",
        "order": 5,
        "width": 0,
        "height": 1,
        "passthru": false,
        "label": "Reset System",
        "tooltip": "Reset emergency mode and resume normal operation",
        "color": "",
        "bgcolor": "",
        "className": "",
        "icon": "",
        "payload": "reset",
        "payloadType": "str",
        "topic": "system",
        "topicType": "str",
        "x": 200,
        "y": 920,
        "wires": [["reset-handler-mqtt"]]
    },
    {
        "id": "reset-handler-mqtt",
        "type": "function",
        "z": "coolbot-mqtt-dashboard-tab",
        "name": "System Reset MQTT",
        "func": "// Reset emergency mode\nflow.set('emergency_mode', false);\nflow.set('system_status', 'normal_operation');\nflow.set('last_off_time', Date.now());\nflow.set('heating_diode_enabled', true);\n\nnode.log('System reset - resuming normal operation');\n\n// Publish reset status\nconst resetMsg = {\n    payload: {\n        system_reset: true,\n        timestamp: Date.now(),\n        emergency_mode: false\n    },\n    topic: 'coolbot/status/system_reset'\n};\n\nreturn [resetMsg, { payload: 'System reset successfully' }];",
        "outputs": 2,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 430,
        "y": 920,
        "wires": [["reset-status-mqtt"], ["reset-notification"]]
    },
    {
        "id": "reset-status-mqtt",
        "type": "mqtt out",
        "z": "coolbot-mqtt-dashboard-tab",
        "name": "Reset Status",
        "topic": "",
        "qos": "1",
        "retain": "false",
        "respTopic": "",
        "contentType": "",
        "userProps": "",
        "correl": "",
        "expiry": "",
        "broker": "mqtt-broker-config",
        "x": 670,
        "y": 900,
        "wires": []
    },
    {
        "id": "reset-notification",
        "type": "ui_toast",
        "z": "coolbot-mqtt-dashboard-tab",
        "position": "top right",
        "displayTime": "3",
        "highlight": "",
        "sendall": true,
        "outputs": 0,
        "ok": "OK",
        "cancel": "",
        "raw": false,
        "className": "",
        "topic": "",
        "name": "Reset Toast",
        "x": 670,
        "y": 940,
        "wires": []
    },
    {
        "id": "temp-group-mqtt",
        "type": "ui_group",
        "name": "Temperature Monitoring",
        "tab": "coolbot-mqtt-ui-tab",
        "order": 1,
        "disp": true,
        "width": "12",
        "collapse": false,
        "className": ""
    },
    {
        "id": "controls-group-mqtt",
        "type": "ui_group",
        "name": "Controls",
        "tab": "coolbot-mqtt-ui-tab",
        "order": 2,
        "disp": true,
        "width": "12",
        "collapse": false,
        "className": ""
    },
    {
        "id": "status-group-mqtt",
        "type": "ui_group",
        "name": "System Status",
        "tab": "coolbot-mqtt-ui-tab",
        "order": 3,
        "disp": true,
        "width": "12",
        "collapse": false,
        "className": ""
    },
    {
        "id": "esp32-group",
        "type": "ui_group",
        "name": "ESP32 Hub Status",
        "tab": "coolbot-mqtt-ui-tab",
        "order": 4,
        "disp": true,
        "width": "12",
        "collapse": false,
        "className": ""
    },
    {
        "id": "coolbot-mqtt-ui-tab",
        "type": "ui_tab",
        "name": "CoolBot MQTT Control",
        "icon": "dashboard",
        "order": 1,
        "disabled": false,
        "hidden": false
    }
]