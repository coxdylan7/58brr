[
    {
        "id": "coolbot-safety-tab",
        "type": "tab",
        "label": "CoolBot Safety Monitor",
        "disabled": false,
        "info": "Safety monitoring and fail-safe systems for CoolBot automation"
    },
    {
        "id": "sensor-watchdog",
        "type": "inject",
        "z": "coolbot-safety-tab",
        "name": "Sensor Watchdog",
        "props": [
            {
                "p": "payload"
            }
        ],
        "repeat": 300,
        "crontab": "",
        "once": true,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "check_sensors",
        "payloadType": "str",
        "x": 150,
        "y": 100,
        "wires": [["sensor-health-check"]]
    },
    {
        "id": "sensor-health-check",
        "type": "function",
        "z": "coolbot-safety-tab",
        "name": "Sensor Health Check",
        "func": "// Check sensor timestamps and values\nconst roomTempLastUpdate = flow.get('room_temp_last_update') || 0;\nconst coilTempLastUpdate = flow.get('coil_temp_last_update') || 0;\nconst currentTime = Date.now();\nconst sensorTimeoutMs = 10 * 60 * 1000; // 10 minutes\n\n// Check if sensors are offline\nconst roomSensorOffline = (currentTime - roomTempLastUpdate) > sensorTimeoutMs;\nconst coilSensorOffline = (currentTime - coilTempLastUpdate) > sensorTimeoutMs;\n\nlet alerts = [];\nlet safetyAction = null;\n\nif (roomSensorOffline) {\n    alerts.push('Room temperature sensor offline');\n    flow.set('room_sensor_status', 'offline');\n} else {\n    flow.set('room_sensor_status', 'online');\n}\n\nif (coilSensorOffline) {\n    alerts.push('Coil temperature sensor offline');\n    flow.set('coil_sensor_status', 'offline');\n} else {\n    flow.set('coil_sensor_status', 'online');\n}\n\n// If critical sensors are offline, activate safety mode\nif (roomSensorOffline || coilSensorOffline) {\n    flow.set('safety_mode', true);\n    safetyAction = {\n        payload: {\n            domain: 'switch',\n            service: 'turn_off',\n            data: {\n                entity_id: 'switch.ac_plug'\n            }\n        },\n        reason: 'sensor_offline'\n    };\n    node.warn(`Safety mode activated: ${alerts.join(', ')}`);\n} else {\n    flow.set('safety_mode', false);\n}\n\n// Check sensor values for reasonableness\nconst roomTemp = flow.get('room_temp');\nconst coilTemp = flow.get('coil_temp');\n\nif (roomTemp && (roomTemp < -10 || roomTemp > 120)) {\n    alerts.push(`Room temperature out of range: ${roomTemp}째F`);\n}\n\nif (coilTemp && (coilTemp < -20 || coilTemp > 100)) {\n    alerts.push(`Coil temperature out of range: ${coilTemp}째F`);\n}\n\nconst alertMsg = alerts.length > 0 ? {\n    payload: {\n        alerts: alerts,\n        timestamp: new Date().toLocaleString(),\n        severity: (roomSensorOffline || coilSensorOffline) ? 'critical' : 'warning'\n    }\n} : null;\n\nreturn [alertMsg, safetyAction];",
        "outputs": 2,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 380,
        "y": 100,
        "wires": [["safety-alerts"], ["safety-shutoff"]]
    },
    {
        "id": "safety-alerts",
        "type": "function",
        "z": "coolbot-safety-tab",
        "name": "Safety Alert Handler",
        "func": "if (!msg.payload) return null;\n\nconst alerts = msg.payload.alerts;\nconst severity = msg.payload.severity;\n\n// Log alerts\nalerts.forEach(alert => {\n    if (severity === 'critical') {\n        node.error(alert);\n    } else {\n        node.warn(alert);\n    }\n});\n\n// Store latest alerts\nflow.set('latest_alerts', alerts);\nflow.set('alert_timestamp', msg.payload.timestamp);\n\n// Create notification message\nreturn {\n    payload: {\n        title: `CoolBot ${severity.toUpperCase()} Alert`,\n        message: alerts.join('\\n'),\n        severity: severity\n    }\n};",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 620,
        "y": 80,
        "wires": [["notification-output"]]
    },
    {
        "id": "safety-shutoff",
        "type": "ha-call-service",
        "z": "coolbot-safety-tab",
        "name": "Safety AC Shutoff",
        "server": "home-assistant",
        "version": 5,
        "debugenabled": false,
        "domain": "{{payload.domain}}",
        "service": "{{payload.service}}",
        "areaId": [],
        "deviceId": [],
        "entityId": [],
        "data": "{{payload.data}}",
        "dataType": "jsonata",
        "mergeContext": "",
        "mustacheAltTags": false,
        "outputProperties": [],
        "queue": "none",
        "x": 620,
        "y": 120,
        "wires": [[]]
    },
    {
        "id": "runtime-monitor",
        "type": "inject",
        "z": "coolbot-safety-tab",
        "name": "Runtime Monitor",
        "props": [
            {
                "p": "payload"
            }
        ],
        "repeat": 600,
        "crontab": "",
        "once": true,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "check_runtime",
        "payloadType": "str",
        "x": 150,
        "y": 200,
        "wires": [["runtime-check"]]
    },
    {
        "id": "runtime-check",
        "type": "function",
        "z": "coolbot-safety-tab",
        "name": "Runtime Safety Check",
        "func": "const acStatus = flow.get('ac_status') || 'off';\nconst acStartTime = flow.get('ac_start_time') || 0;\nconst maxRuntimeMs = (flow.get('max_runtime_hours') || 4) * 60 * 60 * 1000;\nconst currentTime = Date.now();\n\nif (acStatus === 'on' && acStartTime > 0) {\n    const runtimeMs = currentTime - acStartTime;\n    const runtimeHours = runtimeMs / (1000 * 60 * 60);\n    \n    // Check if approaching max runtime (90% threshold)\n    const warningThreshold = maxRuntimeMs * 0.9;\n    \n    if (runtimeMs > warningThreshold && runtimeMs < maxRuntimeMs) {\n        const remainingMinutes = (maxRuntimeMs - runtimeMs) / (1000 * 60);\n        \n        return [{\n            payload: {\n                type: 'runtime_warning',\n                message: `AC approaching max runtime. ${Math.round(remainingMinutes)} minutes remaining.`,\n                runtime_hours: Math.round(runtimeHours * 100) / 100\n            }\n        }, null];\n    } else if (runtimeMs > maxRuntimeMs) {\n        // Force shutdown for safety\n        flow.set('ac_status', 'off');\n        flow.set('last_off_time', currentTime);\n        \n        return [{\n            payload: {\n                type: 'runtime_exceeded',\n                message: `AC forced shutdown after ${Math.round(runtimeHours * 100) / 100} hours`,\n                runtime_hours: runtimeHours\n            }\n        }, {\n            payload: {\n                domain: 'switch',\n                service: 'turn_off',\n                data: {\n                    entity_id: 'switch.ac_plug'\n                }\n            },\n            reason: 'max_runtime_exceeded'\n        }];\n    }\n}\n\nreturn [null, null];",
        "outputs": 2,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 380,
        "y": 200,
        "wires": [["runtime-alerts"], ["runtime-shutoff"]]
    },
    {
        "id": "runtime-alerts",
        "type": "function",
        "z": "coolbot-safety-tab",
        "name": "Runtime Alert Handler",
        "func": "if (!msg.payload) return null;\n\nconst alertType = msg.payload.type;\nconst message = msg.payload.message;\n\nif (alertType === 'runtime_exceeded') {\n    node.error(message);\n} else {\n    node.warn(message);\n}\n\nreturn {\n    payload: {\n        title: 'CoolBot Runtime Alert',\n        message: message,\n        severity: alertType === 'runtime_exceeded' ? 'critical' : 'warning'\n    }\n};",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 620,
        "y": 180,
        "wires": [["notification-output"]]
    },
    {
        "id": "runtime-shutoff",
        "type": "ha-call-service",
        "z": "coolbot-safety-tab",
        "name": "Runtime AC Shutoff",
        "server": "home-assistant",
        "version": 5,
        "debugenabled": false,
        "domain": "{{payload.domain}}",
        "service": "{{payload.service}}",
        "areaId": [],
        "deviceId": [],
        "entityId": [],
        "data": "{{payload.data}}",
        "dataType": "jsonata",
        "mergeContext": "",
        "mustacheAltTags": false,
        "outputProperties": [],
        "queue": "none",
        "x": 620,
        "y": 220,
        "wires": [[]]
    },
    {
        "id": "temperature-monitor",
        "type": "inject",
        "z": "coolbot-safety-tab",
        "name": "Temperature Monitor",
        "props": [
            {
                "p": "payload"
            }
        ],
        "repeat": 120,
        "crontab": "",
        "once": true,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "check_temps",
        "payloadType": "str",
        "x": 150,
        "y": 300,
        "wires": [["temperature-safety-check"]]
    },
    {
        "id": "temperature-safety-check",
        "type": "function",
        "z": "coolbot-safety-tab",
        "name": "Temperature Safety Check",
        "func": "const roomTemp = flow.get('room_temp');\nconst coilTemp = flow.get('coil_temp');\nconst acStatus = flow.get('ac_status') || 'off';\n\nlet alerts = [];\nlet emergencyShutoff = false;\n\n// Critical coil freeze check\nif (coilTemp && coilTemp < 30) {\n    alerts.push(`CRITICAL: Coil temperature dangerously low (${coilTemp}째F)`);\n    emergencyShutoff = true;\n}\n\n// Extreme room temperature check\nif (roomTemp && roomTemp < 20) {\n    alerts.push(`WARNING: Room temperature extremely low (${roomTemp}째F)`);\n}\n\n// Check for rapid temperature drops\nconst prevCoilTemp = flow.get('prev_coil_temp') || coilTemp;\nif (coilTemp && prevCoilTemp && (prevCoilTemp - coilTemp) > 5) {\n    alerts.push(`WARNING: Rapid coil temperature drop detected`);\n}\n\n// Store previous temperature for next check\nflow.set('prev_coil_temp', coilTemp);\n\nif (alerts.length === 0) {\n    return [null, null];\n}\n\nconst alertMsg = {\n    payload: {\n        alerts: alerts,\n        temperatures: {\n            room: roomTemp,\n            coil: coilTemp\n        },\n        severity: emergencyShutoff ? 'critical' : 'warning',\n        timestamp: new Date().toLocaleString()\n    }\n};\n\nconst shutoffMsg = emergencyShutoff ? {\n    payload: {\n        domain: 'switch',\n        service: 'turn_off',\n        data: {\n            entity_id: 'switch.ac_plug'\n        }\n    },\n    reason: 'critical_temperature'\n} : null;\n\nif (emergencyShutoff) {\n    flow.set('ac_status', 'off');\n    flow.set('emergency_mode', true);\n    flow.set('last_off_time', Date.now());\n}\n\nreturn [alertMsg, shutoffMsg];",
        "outputs": 2,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 420,
        "y": 300,
        "wires": [["temp-alert-handler"], ["temp-emergency-shutoff"]]
    },
    {
        "id": "temp-alert-handler",
        "type": "function",
        "z": "coolbot-safety-tab",
        "name": "Temperature Alert Handler",
        "func": "if (!msg.payload) return null;\n\nconst alerts = msg.payload.alerts;\nconst severity = msg.payload.severity;\nconst temps = msg.payload.temperatures;\n\n// Log each alert\nalerts.forEach(alert => {\n    if (severity === 'critical') {\n        node.error(alert);\n    } else {\n        node.warn(alert);\n    }\n});\n\nreturn {\n    payload: {\n        title: `CoolBot Temperature ${severity.toUpperCase()}`,\n        message: alerts.join('\\n') + `\\n\\nRoom: ${temps.room}째F, Coil: ${temps.coil}째F`,\n        severity: severity\n    }\n};",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 680,
        "y": 280,
        "wires": [["notification-output"]]
    },
    {
        "id": "temp-emergency-shutoff",
        "type": "ha-call-service",
        "z": "coolbot-safety-tab",
        "name": "Emergency Temperature Shutoff",
        "server": "home-assistant",
        "version": 5,
        "debugenabled": false,
        "domain": "{{payload.domain}}",
        "service": "{{payload.service}}",
        "areaId": [],
        "deviceId": [],
        "entityId": [],
        "data": "{{payload.data}}",
        "dataType": "jsonata",
        "mergeContext": "",
        "mustacheAltTags": false,
        "outputProperties": [],
        "queue": "none",
        "x": 680,
        "y": 320,
        "wires": [[]]
    },
    {
        "id": "notification-output",
        "type": "function",
        "z": "coolbot-safety-tab",
        "name": "Format Notifications",
        "func": "if (!msg.payload) return null;\n\nconst notification = msg.payload;\n\n// Store in flow for dashboard display\nflow.set('latest_notification', notification);\nflow.set('notification_count', (flow.get('notification_count') || 0) + 1);\n\n// Format for different outputs\nconst logMsg = {\n    payload: `[${notification.severity.toUpperCase()}] ${notification.title}: ${notification.message}`\n};\n\n// Create Home Assistant notification\nconst haNotification = {\n    payload: {\n        domain: 'notify',\n        service: 'persistent_notification',\n        data: {\n            title: notification.title,\n            message: notification.message,\n            notification_id: `coolbot_${Date.now()}`\n        }\n    }\n};\n\nreturn [logMsg, haNotification];",
        "outputs": 2,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 860,
        "y": 200,
        "wires": [["debug-log"], ["ha-notification"]]
    },
    {
        "id": "debug-log",
        "type": "debug",
        "z": "coolbot-safety-tab",
        "name": "Safety Alerts Log",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 1080,
        "y": 180,
        "wires": []
    },
    {
        "id": "ha-notification",
        "type": "ha-call-service",
        "z": "coolbot-safety-tab",
        "name": "HA Notification",
        "server": "home-assistant",
        "version": 5,
        "debugenabled": false,
        "domain": "{{payload.domain}}",
        "service": "{{payload.service}}",
        "areaId": [],
        "deviceId": [],
        "entityId": [],
        "data": "{{payload.data}}",
        "dataType": "jsonata",
        "mergeContext": "",
        "mustacheAltTags": false,
        "outputProperties": [],
        "queue": "none",
        "x": 1080,
        "y": 220,
        "wires": [[]]
    },
    {
        "id": "update-sensor-timestamps",
        "type": "function",
        "z": "coolbot-safety-tab",
        "name": "Update Sensor Timestamps",
        "func": "// This function should be called whenever sensor data is received\n// to update the last seen timestamps for the watchdog\n\nif (msg.topic === 'room_temp') {\n    flow.set('room_temp_last_update', Date.now());\n} else if (msg.topic === 'coil_temp') {\n    flow.set('coil_temp_last_update', Date.now());\n}\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 420,
        "y": 400,
        "wires": [[]]
    }
]