[
    {
        "id": "coolbot-main-tab",
        "type": "tab",
        "label": "CoolBot AC Automation",
        "disabled": false,
        "info": "Main automation flow for CoolBot-style AC control"
    },
    {
        "id": "room-temp-in",
        "type": "server-state-changed",
        "z": "coolbot-main-tab",
        "name": "Room Temperature",
        "server": "home-assistant",
        "version": 4,
        "exposeToHomeAssistant": false,
        "haConfig": [],
        "entityid": "sensor.room_temp",
        "entityidfilter": "",
        "entityidfiltertype": "exact",
        "outputinitially": true,
        "state_type": "num",
        "haltifstate": "",
        "halt_if_type": "str",
        "halt_if_compare": "is",
        "outputs": 1,
        "output_only_on_state_change": false,
        "for": "0",
        "forType": "num",
        "forUnits": "minutes",
        "ignorePrevStateNull": false,
        "ignorePrevStateUnknown": false,
        "ignorePrevStateUnavailable": false,
        "ignoreCurrentStateUnknown": false,
        "ignoreCurrentStateUnavailable": false,
        "outputProperties": [
            {
                "property": "payload",
                "propertyType": "msg",
                "value": "",
                "valueType": "entityState"
            },
            {
                "property": "room_temp",
                "propertyType": "flow",
                "value": "",
                "valueType": "entity"
            }
        ],
        "x": 150,
        "y": 100,
        "wires": [["decision-logic"]]
    },
    {
        "id": "coil-temp-in",
        "type": "server-state-changed",
        "z": "coolbot-main-tab",
        "name": "Coil Temperature",
        "server": "home-assistant",
        "version": 4,
        "exposeToHomeAssistant": false,
        "haConfig": [],
        "entityid": "sensor.coil_temp",
        "entityidfilter": "",
        "entityidfiltertype": "exact",
        "outputinitially": true,
        "state_type": "num",
        "haltifstate": "",
        "halt_if_type": "str",
        "halt_if_compare": "is",
        "outputs": 1,
        "output_only_on_state_change": false,
        "for": "0",
        "forType": "num",
        "forUnits": "minutes",
        "ignorePrevStateNull": false,
        "ignorePrevStateUnknown": false,
        "ignorePrevStateUnavailable": false,
        "ignoreCurrentStateUnknown": false,
        "ignoreCurrentStateUnavailable": false,
        "outputProperties": [
            {
                "property": "payload",
                "propertyType": "msg",
                "value": "",
                "valueType": "entityState"
            },
            {
                "property": "coil_temp",
                "propertyType": "flow",
                "value": "",
                "valueType": "entity"
            }
        ],
        "x": 150,
        "y": 180,
        "wires": [["decision-logic"]]
    },
    {
        "id": "decision-logic",
        "type": "function",
        "z": "coolbot-main-tab",
        "name": "CoolBot Decision Logic",
        "func": "// Get current values\nconst roomTemp = flow.get('room_temp') || msg.room_temp || parseFloat(msg.payload);\nconst coilTemp = flow.get('coil_temp') || msg.coil_temp || parseFloat(msg.payload);\nconst targetTemp = flow.get('target_temp') || 30;\nconst hysteresis = flow.get('hysteresis') || 2;\nconst coilFreezeThreshold = flow.get('coil_freeze_threshold') || 33;\nconst coilResumeThreshold = flow.get('coil_resume_threshold') || 36;\nconst acStatus = flow.get('ac_status') || 'off';\nconst lastOffTime = flow.get('last_off_time') || 0;\nconst minOffTimeMs = (flow.get('min_off_time_minutes') || 8) * 60 * 1000;\nconst acStartTime = flow.get('ac_start_time') || 0;\nconst maxRuntimeMs = (flow.get('max_runtime_hours') || 4) * 60 * 60 * 1000;\n\n// Safety checks\nif (isNaN(roomTemp) || isNaN(coilTemp)) {\n    flow.set('system_status', 'sensor_error');\n    node.warn('Sensor reading error - entering safe mode');\n    return [null, { payload: 'off', reason: 'sensor_error' }];\n}\n\n// Check if minimum off time has passed\nconst timeSinceOff = Date.now() - lastOffTime;\nconst canTurnOn = timeSinceOff > minOffTimeMs;\n\n// Check if AC has been running too long\nconst runtimeMs = acStatus === 'on' ? Date.now() - acStartTime : 0;\nconst runtimeExceeded = runtimeMs > maxRuntimeMs;\n\nlet newStatus = acStatus;\nlet reason = 'normal_operation';\n\n// Decision logic\nif (acStatus === 'off') {\n    // AC is currently off - check if we should turn it on\n    if (roomTemp > (targetTemp + hysteresis) && \n        coilTemp > coilResumeThreshold && \n        canTurnOn) {\n        newStatus = 'on';\n        reason = 'cooling_needed';\n        flow.set('ac_start_time', Date.now());\n    }\n} else {\n    // AC is currently on - check if we should turn it off\n    if (coilTemp <= coilFreezeThreshold) {\n        newStatus = 'off';\n        reason = 'freeze_protection';\n        flow.set('last_off_time', Date.now());\n    } else if (roomTemp <= targetTemp) {\n        newStatus = 'off';\n        reason = 'target_reached';\n        flow.set('last_off_time', Date.now());\n    } else if (runtimeExceeded) {\n        newStatus = 'off';\n        reason = 'max_runtime_exceeded';\n        flow.set('last_off_time', Date.now());\n    }\n}\n\n// Update status\nflow.set('ac_status', newStatus);\nflow.set('system_status', reason);\nflow.set('room_temp', roomTemp);\nflow.set('coil_temp', coilTemp);\n\n// Create status message\nconst statusMsg = {\n    payload: {\n        room_temp: roomTemp,\n        coil_temp: coilTemp,\n        target_temp: targetTemp,\n        ac_status: newStatus,\n        reason: reason,\n        can_turn_on: canTurnOn,\n        runtime_hours: runtimeMs / (1000 * 60 * 60),\n        time_since_off_minutes: timeSinceOff / (1000 * 60)\n    }\n};\n\n// Output to AC control if status changed\nconst controlMsg = newStatus !== acStatus ? \n    { payload: newStatus, reason: reason } : null;\n\nreturn [statusMsg, controlMsg];",
        "outputs": 2,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 400,
        "y": 140,
        "wires": [["status-display"], ["ac-control"]]
    },
    {
        "id": "ac-control",
        "type": "function",
        "z": "coolbot-main-tab",
        "name": "AC Smart Plug Control",
        "func": "if (!msg.payload) return null;\n\nconst command = msg.payload === 'on' ? 'turn_on' : 'turn_off';\nconst reason = msg.reason || 'unknown';\n\n// Log the action\nnode.log(`AC ${command} - Reason: ${reason}`);\n\n// Send command to smart plug\nconst plugMsg = {\n    payload: {\n        domain: 'switch',\n        service: command,\n        data: {\n            entity_id: 'switch.ac_plug'\n        }\n    },\n    reason: reason\n};\n\n// Also control heating pad if enabled\nconst heatingPadEnabled = flow.get('enable_heating_pad') || false;\nconst heatingPadMsg = heatingPadEnabled ? {\n    payload: {\n        domain: 'switch',\n        service: msg.payload === 'on' ? 'turn_on' : 'turn_off',\n        data: {\n            entity_id: 'switch.heating_pad'\n        }\n    }\n} : null;\n\nreturn [plugMsg, heatingPadMsg];",
        "outputs": 2,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 650,
        "y": 180,
        "wires": [["call-service-ac"], ["call-service-heating"]]
    },
    {
        "id": "call-service-ac",
        "type": "ha-call-service",
        "z": "coolbot-main-tab",
        "name": "AC Smart Plug",
        "server": "home-assistant",
        "version": 5,
        "debugenabled": false,
        "domain": "{{payload.domain}}",
        "service": "{{payload.service}}",
        "areaId": [],
        "deviceId": [],
        "entityId": [],
        "data": "{{payload.data}}",
        "dataType": "jsonata",
        "mergeContext": "",
        "mustacheAltTags": false,
        "outputProperties": [],
        "queue": "none",
        "x": 890,
        "y": 160,
        "wires": [["ir-control-trigger"]]
    },
    {
        "id": "call-service-heating",
        "type": "ha-call-service",
        "z": "coolbot-main-tab",
        "name": "Heating Pad",
        "server": "home-assistant",
        "version": 5,
        "debugenabled": false,
        "domain": "{{payload.domain}}",
        "service": "{{payload.service}}",
        "areaId": [],
        "deviceId": [],
        "entityId": [],
        "data": "{{payload.data}}",
        "dataType": "jsonata",
        "mergeContext": "",
        "mustacheAltTags": false,
        "outputProperties": [],
        "queue": "none",
        "x": 890,
        "y": 220,
        "wires": [[]]
    },
    {
        "id": "ir-control-trigger",
        "type": "switch",
        "z": "coolbot-main-tab",
        "name": "IR Control Check",
        "property": "reason",
        "propertyType": "msg",
        "rules": [
            {
                "t": "eq",
                "v": "cooling_needed",
                "vt": "str"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 1,
        "x": 1120,
        "y": 160,
        "wires": [["ir-delay"]]
    },
    {
        "id": "ir-delay",
        "type": "delay",
        "z": "coolbot-main-tab",
        "name": "Wait 10s",
        "pauseType": "delay",
        "timeout": "10",
        "timeoutUnits": "seconds",
        "rate": "1",
        "nbRateUnits": "1",
        "rateUnits": "second",
        "randomFirst": "1",
        "randomLast": "5",
        "randomUnits": "seconds",
        "drop": false,
        "allowrate": false,
        "x": 1290,
        "y": 160,
        "wires": [["ir-command"]]
    },
    {
        "id": "ir-command",
        "type": "function",
        "z": "coolbot-main-tab",
        "name": "Send IR Command",
        "func": "const irEnabled = flow.get('enable_ir_control') || false;\n\nif (!irEnabled) {\n    return null;\n}\n\n// Send IR command to set AC to cool mode, 60°F, high fan\nreturn {\n    payload: {\n        domain: 'remote',\n        service: 'send_command',\n        data: {\n            entity_id: 'remote.ac_ir_blaster',\n            command: ['cool_60_high']\n        }\n    }\n};",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1470,
        "y": 160,
        "wires": [["call-service-ir"]]
    },
    {
        "id": "call-service-ir",
        "type": "ha-call-service",
        "z": "coolbot-main-tab",
        "name": "IR Blaster",
        "server": "home-assistant",
        "version": 5,
        "debugenabled": false,
        "domain": "{{payload.domain}}",
        "service": "{{payload.service}}",
        "areaId": [],
        "deviceId": [],
        "entityId": [],
        "data": "{{payload.data}}",
        "dataType": "jsonata",
        "mergeContext": "",
        "mustacheAltTags": false,
        "outputProperties": [],
        "queue": "none",
        "x": 1650,
        "y": 160,
        "wires": [[]]
    },
    {
        "id": "status-display",
        "type": "function",
        "z": "coolbot-main-tab",
        "name": "Format Status",
        "func": "const data = msg.payload;\n\n// Format for dashboard display\nconst status = {\n    room_temp: Math.round(data.room_temp * 10) / 10,\n    coil_temp: Math.round(data.coil_temp * 10) / 10,\n    target_temp: data.target_temp,\n    ac_status: data.ac_status,\n    status_text: formatStatusText(data.reason),\n    runtime_hours: Math.round(data.runtime_hours * 100) / 100,\n    can_turn_on: data.can_turn_on,\n    timestamp: new Date().toLocaleString()\n};\n\nfunction formatStatusText(reason) {\n    switch(reason) {\n        case 'cooling_needed': return 'Cooling';\n        case 'freeze_protection': return 'Freeze Protection';\n        case 'target_reached': return 'Target Reached';\n        case 'max_runtime_exceeded': return 'Max Runtime';\n        case 'sensor_error': return 'Sensor Error';\n        case 'normal_operation': return 'Monitoring';\n        default: return 'Unknown';\n    }\n}\n\nreturn { payload: status };",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 650,
        "y": 100,
        "wires": [["dashboard-update"]]
    },
    {
        "id": "dashboard-update",
        "type": "function",
        "z": "coolbot-main-tab",
        "name": "Dashboard Output",
        "func": "// Split status for different dashboard elements\nconst status = msg.payload;\n\n// Temperature gauges\nconst tempMsg = {\n    topic: \"temperatures\",\n    payload: {\n        room: status.room_temp,\n        coil: status.coil_temp,\n        target: status.target_temp\n    }\n};\n\n// Status text\nconst statusMsg = {\n    topic: \"status\",\n    payload: status.status_text,\n    ac_on: status.ac_status === 'on'\n};\n\n// Runtime info\nconst runtimeMsg = {\n    topic: \"runtime\", \n    payload: {\n        hours: status.runtime_hours,\n        can_start: status.can_turn_on,\n        timestamp: status.timestamp\n    }\n};\n\nreturn [tempMsg, statusMsg, runtimeMsg];",
        "outputs": 3,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 880,
        "y": 100,
        "wires": [[], [], []]
    },
    {
        "id": "init-flow",
        "type": "inject",
        "z": "coolbot-main-tab",
        "name": "Initialize",
        "props": [
            {
                "p": "payload"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": true,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "init",
        "payloadType": "str",
        "x": 150,
        "y": 40,
        "wires": [["init-settings"]]
    },
    {
        "id": "init-settings",
        "type": "function",
        "z": "coolbot-main-tab",
        "name": "Initialize Settings",
        "func": "// Initialize flow variables with default values\nflow.set('target_temp', 30);\nflow.set('hysteresis', 2);\nflow.set('coil_freeze_threshold', 33);\nflow.set('coil_resume_threshold', 36);\nflow.set('min_off_time_minutes', 8);\nflow.set('max_runtime_hours', 4);\nflow.set('enable_heating_pad', true);\nflow.set('enable_ir_control', false);\nflow.set('ac_status', 'off');\nflow.set('system_status', 'initializing');\nflow.set('last_off_time', 0);\nflow.set('ac_start_time', 0);\n\nnode.log('CoolBot system initialized with default settings');\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 380,
        "y": 40,
        "wires": [[]]
    }
]